#include <RadioHead.h>
#include <SPI.h>
#include <RH_ABZ.h>

RH_ABZ abz;

#define GREEN_LED 13
#define YELLOW_LED 12
#define RED_LED 11

void setup() 
{  
  pinMode(GREEN_LED, OUTPUT);
  pinMode(YELLOW_LED, OUTPUT);
  pinMode(RED_LED, OUTPUT);
 
  Serial.begin(9600);

  SX1276SetBoardTcxo(true);
  delay(1);
 
  if (!abz.init())
    Serial.println("init failed");  
  // Defaults after init are 434.0MHz, 13dBm, Bw = 125 kHz, Cr = 4/5, Sf = 128chips/symbol, CRC on
 
  abz.setFrequency(868.0);
 
  // You can change the modulation speed etc from the default
  //abz.setModemConfig(RH_RF95::Bw125Cr45Sf128);
  //abz.setModemConfig(RH_RF95::Bw125Cr45Sf2048);
 
  // The default transmitter power is 13dBm, using PA_BOOST.
  // You can set transmitter powers from 2 to 20 dBm:
  //abz.setTxPower(20); // Max power
 
}
 
void loop()
{
  digitalWrite(YELLOW_LED, 1);
  digitalWrite(GREEN_LED, 0);
  digitalWrite(RED_LED, 0);
  
  if (abz.available())
  {
  
    //uint8_t buf[RH_RF95_MAX_MESSAGE_LEN]; original code
    uint8_t buf[5];
    uint8_t len = sizeof(buf);
    if (abz.recv(buf, &len)){
       digitalWrite(GREEN_LED, 1);

       Serial.print("got request: ");
       Serial.println((char*)buf);
 
       // Send a reply
       uint8_t data[] = "And hello back to you";
       abz.send(data, sizeof(data));
       abz.waitPacketSent();
       Serial.println("Sent a reply");
       digitalWrite(GREEN_LED, 0);
    }
    else
    {
       Serial.println("recv failed");
    }
  }
}
